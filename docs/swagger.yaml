basePath: /
definitions:
  dto.ArticleDTO:
    properties:
      description:
        additionalProperties: true
        type: object
      enclosure:
        additionalProperties: true
        type: object
      guid:
        type: string
      link:
        items:
          type: string
        type: array
      pubDate:
        type: string
      title:
        type: string
    type: object
  dto.ContentDTO:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.ItemDTO'
        type: array
      kind:
        type: string
    type: object
  dto.CreateMenuRequestDTO:
    properties:
      day_menus:
        items:
          $ref: '#/definitions/dto.DayMenuDTO'
        type: array
      title:
        type: string
    required:
    - title
    type: object
  dto.CreateUserRequestDTO:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.DayMenuDTO:
    properties:
      contents:
        items:
          $ref: '#/definitions/dto.ContentDTO'
        type: array
      day:
        type: string
      image:
        type: string
    type: object
  dto.ItemDTO:
    properties:
      name:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserDTO'
    type: object
  dto.MenuDTO:
    properties:
      day_menus:
        items:
          $ref: '#/definitions/dto.DayMenuDTO'
        type: array
      id:
        type: integer
      title:
        type: string
    type: object
  dto.UserDTO:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      name:
        type: string
      phone_number:
        type: string
    type: object
  lib.Response:
    properties:
      data: {}
      message: {}
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Helper Backend
  version: "1.0"
paths:
  /api/v1/article/:
    get:
      description: Get all article
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ArticleDTO'
            type: array
      summary: Get all article
      tags:
      - article
    post:
      consumes:
      - application/json
      description: Create a new article with the input paylod
      parameters:
      - description: create article
        in: body
        name: article_info
        required: true
        schema:
          $ref: '#/definitions/dto.ArticleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleDTO'
      summary: Create a new article
      tags:
      - article
  /api/v1/menu/:
    get:
      consumes:
      - application/json
      description: Get all menu
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MenuDTO'
            type: array
      summary: Get all menu
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: Create a new menu with the input paylod
      parameters:
      - description: create menu
        in: body
        name: menu_info
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenuRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MenuDTO'
      summary: Create a new menu
      tags:
      - menu
  /api/v1/user/:
    get:
      consumes:
      - application/json
      description: Get User By ID
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
      summary: Get User By ID
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user with the input paylod
      parameters:
      - description: create user
        in: body
        name: user_info
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDTO'
      summary: Create a new user
      tags:
      - user
  /api/v1/user/info:
    get:
      consumes:
      - application/json
      description: Get User
      parameters:
      - description: user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
      summary: Get User
      tags:
      - user
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: user login info
        in: body
        name: login_info
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Login
      tags:
      - user
swagger: "2.0"
